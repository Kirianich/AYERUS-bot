const { Events, ActionRowBuilder, ModalBuilder, TextInputBuilder, TextInputStyle, EmbedBuilder } = require('discord.js');
const axios = require('axios');

module.exports = {
    name: Events.InteractionCreate,
    async execute(interaction) {
        if (interaction.isButton()) {
            if (interaction.customId === 'verify_button') {
                // Show a modal to ask for Minecraft username
                const modal = new ModalBuilder()
                    .setCustomId('verification_modal')
                    .setTitle('Minecraft Verification');

                const usernameInput = new TextInputBuilder()
                    .setCustomId('minecraft_username')
                    .setLabel('–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–∏–∫ –≤ –∏–≥—Ä–µ:')
                    .setStyle(TextInputStyle.Short)
                    .setRequired(true);

                const row = new ActionRowBuilder().addComponents(usernameInput);
                modal.addComponents(row);

                await interaction.showModal(modal);
            }

            else if (interaction,customId === 'howto_button') {
                await interaction.reply({
                    content: 'üìñ **–ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç:**\n> 1Ô∏è‚É£ –ó–∞–π—Ç–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä mc.hypixel.net\n> 2Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ–≤—É (My Profile) –∏ –Ω–∞–∂–∞—Ç—å –ø–∫–º\n> 3Ô∏è‚É£ –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ—Ü. —Å–µ—Ç–∏ (—Å–ø—Ä–∞–≤–∞ –æ—Ç –¥–≤–µ—Ä–∏).\n> 4Ô∏è‚É£ –ù–∞–∂–∞—Ç—å Discord\n> 5Ô∏è‚É£ –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –Ω–∏–∫ –≤ –¥–∏—Å–∫–æ—Ä–¥–µ\n> 6Ô∏è‚É£ –í–µ—Ä–Ω—É—Ç—å—Å—è —Å—é–¥–∞ –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–≤—è–∑–∞—Ç—å"' , ephemeral: true
                });
            }
        }

        if (interaction.isModalSubmit()) {
            if (interaction.customId === 'verification_modal') {
                const username = interaction.fields.getTextInputValue('minecraft_username');
                const discordId = interaction.user.id;

                await interaction.reply({ content: 'üîç –ü—Ä–æ–≤–µ—Ä—è—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...', ephemeral: true });

                try {
                    // Call Hypixel API
                    const response = await axios.get(`https://api.hypixel.net/player?key=YOUR_HYPIXEL_API_KEY&name=${username}`);
                    const playerData = response.data.player;

                    if (!playerData) {
                        return interaction.editReply({ content: '‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Hypixel!', ephemeral: true });
                    }

                    // Check if the player has linked their Discord
                    if (!playerData.socialMedia || !playerData.socialMedia.links || !playerData.socialMedia.links.DISCORD) {
                        return interaction.editReply({ content: '‚ùå –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Discord –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ Hypixel.', ephemeral: true });
                    }

                    // Compare Discord IDs
                    if (playerData.socialMedia.links.DISCORD !== interaction.user.tag) {
                        return interaction.editReply({ content: '‚ùå –í–∞—à –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π Discord –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!', ephemeral: true });
                    }

                    // Assign Verified Role
                    const role = interaction.guild.roles.cache.find(r => r.name === 'Verified');
                    const member = interaction.guild.members.cache.get(discordId);

                    if (role && member) {
                        await member.roles.add(role);
                        return interaction.editReply({ content: '‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ–≤—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!', ephemeral: true });
                    } else {
                        return interaction.editReply({ content: '‚ùå –ù–µ –º–æ–≥—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω—É–∂–Ω—É—é —Ä–æ–ª—å.', ephemeral: true });
                    }

                } catch (error) {
                    console.error(error);
                    return interaction.editReply({ content: '‚ùå Error fetching data. Please try again later.', ephemeral: true });
                }
            }
        }
    }
};
