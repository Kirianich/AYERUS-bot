const axios = require('axios');
const User = require('../../models/User');
const GuildSettings = require('../../models/GuildSettings');
require('dotenv').config();

module.exports = {
    customId: 'verification_modal',
    async execute(interaction) {
        const username = interaction.fields.getTextInputValue('minecraft_username');
        const discordId = interaction.user.id;
        const discordUsername = interaction.user.username;
        const guildId = interaction.guild.id;

        console.log("üîç Received interaction for:", interaction.customId);

        await interaction.deferReply({ ephemeral: true });
        console.log("‚úÖ Interaction deferred");

        try {
            const existingUser = await User.findOne({ discordId });
            if (existingUser) {
                return interaction.editReply({ content: '‚úÖ –í—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!' });
            }

            // Step 1: Fetch player data
            const { data: playerRes } = await axios.get('https://api.hypixel.net/player', {
                params: {
                    key: process.env.HYPIXEL_API_KEY,
                    name: username
                }
            });

            if (!playerRes.success || !playerRes.player) {
                return interaction.editReply({ content: '‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ API –æ—Ç–≤–µ—Ç–∏–ª–æ —Å –æ—à–∏–±–∫–æ–π.' });
            }

            const player = playerRes.player;
            const uuid = player.uuid;
            const displayName = player.displayname;
            const networkRank = player.rank || player.monthlyPackageRank || player.newPackageRank || 'NONE';
            const linkedDiscord = player?.socialMedia?.links?.DISCORD;

            console.log("üéÆ UUID:", uuid);
            console.log("üîó Linked Discord:", linkedDiscord);
            console.log("üè∑Ô∏è Display Name:", displayName);
            console.log("üåê Network Rank:", networkRank);

            if (!linkedDiscord || linkedDiscord !== discordUsername) {
                return interaction.editReply({ content: `‚ùå –í–∞—à –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π Discord (${linkedDiscord}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º!` });
            }

            // Step 2: Fetch SkyBlock profiles
            const { data: profileRes } = await axios.get('https://api.hypixel.net/skyblock/profiles', {
                params: {
                    key: process.env.HYPIXEL_API_KEY,
                    uuid
                }
            });

            if (!profileRes.success || !profileRes.profiles) {
                return interaction.editReply({ content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å SkyBlock –ø—Ä–æ—Ñ–∏–ª–∏.' });
            }

            const mainProfile = profileRes.profiles.find(p => p.selected);
            const memberData = mainProfile?.members?.[uuid];

            if (!mainProfile || !memberData) {
                return interaction.editReply({ content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π SkyBlock –ø—Ä–æ—Ñ–∏–ª—å.' });
            }

            const skyblockLevel = mainProfile.leveling?.experience || memberData?.leveling?.experience || 0;
            console.log("üìà SkyBlock Level XP:", skyblockLevel);
            console.log("üß™ Raw Skills Data:", memberData.experience || {});

            // Step 3: Fetch guild info
            const { data: guildRes } = await axios.get('https://api.hypixel.net/guild', {
                params: {
                    key: process.env.HYPIXEL_API_KEY,
                    player: uuid
                }
            });

            let guildName = null;
            let guildRank = null;

            if (guildRes.success && guildRes.guild) {
                guildName = guildRes.guild.name;
                const memberInfo = guildRes.guild.members.find(m => m.uuid === uuid);
                guildRank = memberInfo?.rank || 'Member';
                console.log("üè∞ Guild Name:", guildName);
                console.log("üìõ Guild Rank:", guildRank);
            }

            // Fetch verified role
            const guildSettings = await GuildSettings.findOne({ guildId });
            if (!guildSettings || !guildSettings.verifiedRole) {
                return interaction.editReply({ content: '‚ùå –†–æ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/setverifiedrole`' });
            }

            const role = interaction.guild.roles.cache.get(guildSettings.verifiedRole);
            const member = await interaction.guild.members.fetch(discordId);

            if (role && member) {
                await member.roles.add(role);

                // Save user
                await User.create({
                    discordId,
                    username,
                    guildId,
                    uuid,
                    displayName,
                    networkRank,
                    skyblockLevel,
                    guildName,
                    guildRank
                });

                return interaction.editReply({ content: '‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!' });
            } else {
                return interaction.editReply({ content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å.' });
            }
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
            if (interaction.replied || interaction.deferred) {
                await interaction.editReply({ content: '‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
            } else {
                await interaction.reply({ content: '‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
            }
        }
    }
};
