const { Events } = require('discord.js');
const axios = require('axios');
const mongoose = require('mongoose');
const User = require('../../models/User'); // Schema for storing verified users
const GuildSettings = require('../../models/GuildSettings'); // Stores guild-specific settings
require('dotenv').config();

module.exports = {
    customId: 'verification_modal',
    async execute(interaction) {
        const username = interaction.fields.getTextInputValue('minecraft_username');
        const discordId = interaction.user.id;
        console.log("üîç Received interaction for:", interaction.customId);        

        await interaction.deferReply({ ephemeral: true });
        console.log("‚úÖ Interaction deferred");

        try {
            // Check if user is already verified
            const existingUser = await User.findOne({ discordId });
            if (existingUser) {
                return interaction.editReply({ content: '‚úÖ –í—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!'});
            }

            // Call Hypixel API
            const response = await axios.get(`https://api.hypixel.net/player?key=${process.env.HYPIXEL_API_KEY}&name=${username}`);
            console.log("üì° Hypixel API Response:", response.data);
            if (!response.data.success) {
                return interaction.editReply({ content: '‚ùå –û—à–∏–±–∫–∞ API Hypixel, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'});
            }

            const playerData = response.data.player;
            if (!playerData) {
                console.log("‚ö†Ô∏è No player data found for username:", username);
                return interaction.editReply({ content: '‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Hypixel!'});
            }

            // Ensure socialMedia exists
            const linkedDiscord = playerData?.socialMedia?.links?.DISCORD;
            if (!linkedDiscord) {
                console.log("‚ö†Ô∏è No linked Discord found for:", username);
                return interaction.editReply({ content: '‚ùå –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Discord –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ Hypixel.'});
            }

            const discordUsername = interaction.user.username;
            console.log("üîó Comparing Linked Discord:", linkedDiscord, "with User:", discordUsername);
            if (linkedDiscord !== discordUsername) {
                return interaction.editReply({ 
                content: `‚ùå –í–∞—à –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π Discord (${linkedDiscord}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º!`});
            }

            // Fetch the verified role from MongoDB
            const guildSettings = await GuildSettings.findOne({ guildId: interaction.guild.id });
            if (!guildSettings || !guildSettings.verifiedRole) {
                console.log("‚ö†Ô∏è No verified role set for guild:", interaction.guild.id);
                return interaction.editReply({ content: '‚ùå –†–æ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/setverifiedrole`'});
            }

            const role = interaction.guild.roles.cache.get(guildSettings.verifiedRole);
            const member = await interaction.guild.members.fetch(discordId);

            console.log("üîç Fetched Role:", role ? "‚úÖ Found" : "‚ùå Not Found");
            console.log("üîç Fetched Member:", member ? "‚úÖ Found" : "‚ùå Not Found");

            if (role && member) {
                await member.roles.add(role);

                // Save user to the database
                await User.create({
                    discordId,
                    username,
                    guildId: interaction.guild.id
                });

                return interaction.editReply({ content: '‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!'});
            } else {
                return interaction.editReply({ content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å.'});
            }

        } catch (error) {
             if (interaction.replied || interaction.deferred) {
        await interaction.editReply({ content: '‚ùå Something went wrong. Try again later.', ephemeral: true });
    } else {
        await interaction.reply({ content: '‚ùå Something went wrong. Try again later.', ephemeral: true });
    }
        }
    }
};
