const { Events } = require('discord.js');
const axios = require('axios');
const mongoose = require('mongoose');
const User = require('../../models/User'); // Schema for storing verified users
const GuildSettings = require('../../models/GuildSettings'); // Stores guild-specific settings
require('dotenv').config();

module.exports = {
    customId: 'verification_modal',
    async execute(interaction) {
        await interaction.deferReply({ ephemeral: true });
        console.log("‚úÖ Interaction deferred");  

        try {
            const username = interaction.fields.getTextInputValue('minecraft_username');
            const discordId = interaction.user.id;
            console.log("üîç Received interaction for:", interaction.customId);
        
            // Check if user is already verified
            const existingUser = await User.findOne({ discordId });
            if (existingUser) {
                await interaction.editReply({ content: '‚úÖ –í—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!'});
                return;
            }

            // Call Hypixel API
            const {data: playerRes} = await axios.get(`https://api.hypixel.net/player?key=${process.env.HYPIXEL_API_KEY}&name=${username}`);

            if (!playerRes.success || !playerRes.player) {
                console.log("‚ö†Ô∏è No player data found for username:", username);
                return interaction.editReply({ content: '‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ API'});
            }
            
            const player = playerRes.player;
            const uuid = player.uuid;
            const displayName = player.displayname;
            const networkRank = player.rank || player.monthlyPackageRank || player.newPackageRank || 'NONE';

            const {data: profileRes} = await axios.get(`https://api.hypixel.net/skyblock/profiles?key=${process.env.HYPIXEL_API_KEY}&uuid=${uuid}`);
            console.log("üì° Hypixel API Response:", response.data);
            if (!profileRes.success || !profileRes.profiles) {
                return interaction.editReply({ content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å SkyBlock –ø—Ä–æ—Ñ–∏–ª–∏.' });
            }
            
            const mainProfile = profileRes.profiles.find(p => p.selected);
            const memberData = mainProfile?.members?.[uuid];

            if (!mainProfile || !memberData) {
                return interaction.editReply({ content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π SkyBlock –ø—Ä–æ—Ñ–∏–ª—å.' });
            }

            const skyblockLevel = mainProfile.leveling?.experience || memberData?.leveling?.experience || 0;

            // TEMP: Log raw skills structure for future parsing
            console.log("üß™ Raw skills data:", memberData.experience || {});

            const {data: guildRes} = await axios.get(`https://api.hypixel.net/guild?key=${process.env.HYPIXEL_API_KEY}&player=${uuid}`);

            let guildName = null;
            let guildRank = null;

            if (guildRes.success && guildRes.guild) {
                guildName = guildRes.guild.name;
                const memberInfo = guildRes.guild.members.find(m => m.uuid === uuid);
                guildRank = memberInfo?.rank || 'Member';
            }

           

            // Ensure socialMedia exists
            const linkedDiscord = playerData?.socialMedia?.links?.DISCORD;
            if (!linkedDiscord) {
                console.log("‚ö†Ô∏è No linked Discord found for:", username);
                await interaction.editReply({ content: '‚ùå –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Discord –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ Hypixel.'});
                return;
            }
            
            const discordUsername = interaction.user.username;
            console.log("üîó Comparing Linked Discord:", linkedDiscord, "with User:", discordUsername);
            if (linkedDiscord !== discordUsername) {
                await interaction.editReply({ content: `‚ùå –í–∞—à –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π Discord (${linkedDiscord}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º!`});
                return;
            }

            // Fetch the verified role from MongoDB
            const guildSettings = await GuildSettings.findOne({ guildId: interaction.guild.id });
            if (!guildSettings || !guildSettings.verifiedRole) {
                console.log("‚ö†Ô∏è No verified role set for guild:", interaction.guild.id);
                await interaction.editReply({ content: '‚ùå –†–æ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/setverifiedrole`'});
                return;
            }

            const role = interaction.guild.roles.cache.get(guildSettings.verifiedRole);
            console.log("üîç Fetched Role:", role ? "‚úÖ Found" : "‚ùå Not Found");
            const member = await interaction.guild.members.fetch(discordId);
            console.log("üîç Fetched Member:", member ? "‚úÖ Found" : "‚ùå Not Found");

            if (role && member) {
                await member.roles.add(role);
                // Save user to the database
                await User.create({
                    discordId,
                    username,
                    guildId: interaction.guild.id,
                    hypixelGuild,
                    guildRank,
                    networkRank: rank,
                    skyblockLevel,
                    skyblockSkills
                });

                return interaction.editReply({ content: '‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!'});
            } else {
                await interaction.editReply({ content: '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å.'});
                return;
            }

        } catch (error) {
            console.error("‚ùå Error in verification:", error);
        }
    }
};
